{
  "address": "0x8e18D9A09011eE9Ec3348337c0C466B643cB7aF7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "topicOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "topicId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "profileArId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "topicsArId",
          "type": "bytes32"
        }
      ],
      "name": "TimeTokenMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "topicOwner",
          "type": "address"
        }
      ],
      "name": "TimeTroveCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "arOwnerAddress",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "topicOwner",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct MuseTimeController.CreateTimeTroveParams[]",
          "name": "params",
          "type": "tuple[]"
        }
      ],
      "name": "createTimeTroves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDivisor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "museTimeNFT_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "paramsSigner_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valueInWei",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "profileArId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "topicsArId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "topicId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "topicOwner",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "mintTimeToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "museTimeNFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paramsSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "withdrawOnSuccess",
          "type": "bool"
        }
      ],
      "name": "setConfirmed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feeDivisor_",
          "type": "uint256"
        }
      ],
      "name": "setFeeDivisor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paramsSigner_",
          "type": "address"
        }
      ],
      "name": "setParamsSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "setRejected",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "timeTokenOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "valueInWei",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "topicOwner",
              "type": "address"
            },
            {
              "internalType": "enum MuseTimeController.TimeTokenStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct MuseTimeController.TimeToken",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "topicOwner",
          "type": "address"
        }
      ],
      "name": "timeTroveOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "arOwnerAddress",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct MuseTimeController.TimeTrove",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFromTimeTrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x89f13a889ce520b84b531344d1fd2759cae4a4455b34033e5152a56fdded8d5d",
  "receipt": {
    "to": null,
    "from": "0xb911edC355C8B88CAD7B28bDa54F7649376B8612",
    "contractAddress": "0x8e18D9A09011eE9Ec3348337c0C466B643cB7aF7",
    "transactionIndex": 141,
    "gasUsed": "1884529",
    "logsBloom": "0x
    "blockHash": "0x79ff4dc938d3e92f9ca88b5ef37c5625bd923368c1ed92246a7189defb9b6f71",
    "transactionHash": "0x89f13a889ce520b84b531344d1fd2759cae4a4455b34033e5152a56fdded8d5d",
    "logs": [],
    "blockNumber": 16011544,
    "cumulativeGasUsed": "20164082",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "e0d917ac1bfa5dc44ca4cd610980536a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"topicOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"topicId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"profileArId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"topicsArId\",\"type\":\"bytes32\"}],\"name\":\"TimeTokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"topicOwner\",\"type\":\"address\"}],\"name\":\"TimeTroveCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"arOwnerAddress\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"topicOwner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct MuseTimeController.CreateTimeTroveParams[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"createTimeTroves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"museTimeNFT_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"paramsSigner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueInWei\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"profileArId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"topicsArId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"topicId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"topicOwner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintTimeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"museTimeNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paramsSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"withdrawOnSuccess\",\"type\":\"bool\"}],\"name\":\"setConfirmed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeDivisor_\",\"type\":\"uint256\"}],\"name\":\"setFeeDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paramsSigner_\",\"type\":\"address\"}],\"name\":\"setParamsSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"setRejected\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"timeTokenOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"valueInWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"topicOwner\",\"type\":\"address\"},{\"internalType\":\"enum MuseTimeController.TimeTokenStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct MuseTimeController.TimeToken\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"topicOwner\",\"type\":\"address\"}],\"name\":\"timeTroveOf\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"arOwnerAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct MuseTimeController.TimeTrove\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFromTimeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"mintTimeToken(uint256,uint256,bytes32,bytes32,bytes32,address,bytes)\":{\"details\":\"TimeToken\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"tokenURI(uint256)\":{\"details\":\"Render\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_claimedMintKeysLegacy\":{\"details\":\"Key(uint256) mapping to a claimed key. Used to prevent address from rebroadcasting mint transactions\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"hardhat/contracts/MuseTimeController.sol\":\"MuseTimeController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"hardhat/contracts/MuseTimeController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\\\";\\nimport \\\"lib/solmate/src/utils/LibString.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./libraries/SignatureVerification.sol\\\";\\n\\ncontract MuseTimeController is OwnableUpgradeable {\\n\\n    struct TimeTrove {\\n        bytes32 arOwnerAddress;\\n        uint256 balance;\\n    }\\n\\n    enum TimeTokenStatus {\\n        PENDING,\\n        REJECTED,\\n        CONFIRMED\\n    }\\n\\n    struct TimeToken {\\n        uint256 valueInWei;\\n        address topicOwner;\\n        TimeTokenStatus status;\\n    }\\n\\n    address public museTimeNFT;\\n    address public paramsSigner;\\n\\n    string public baseURI;\\n    uint256 public mintIndex;\\n\\n    /**\\n     * @dev Key(uint256) mapping to a claimed key.\\n     * Used to prevent address from rebroadcasting mint transactions\\n     */\\n    mapping(uint256 => bool) private _claimedMintKeysLegacy;  // deprecated, but keep the storage slot\\n    mapping(address => TimeTrove) private _timeTrovesLegacy;  // deprecated, but keep the storage slot\\n\\n    mapping(address => TimeTrove) private _timeTroves;\\n    mapping(uint256 => TimeToken) private _timeTokens;\\n\\n    uint256 public feeDivisor;  // divisor 500: (1 / 500) == 0.2% | 2000000000000000 === (2 / 1000) * 1e18\\n\\n    /* variables end */\\n\\n    event TimeTroveCreated(address indexed topicOwner);\\n    event TimeTokenMinted(\\n        address indexed topicOwner, bytes32 indexed topicId, uint256 indexed tokenId,\\n        address tokenOwner, bytes32 profileArId, bytes32 topicsArId);\\n\\n    /* events end */\\n\\n    function initialize(\\n        address museTimeNFT_,\\n        string memory baseURI_,\\n        address paramsSigner_\\n    ) initializer public {\\n        __Ownable_init();\\n        museTimeNFT = museTimeNFT_;\\n        baseURI = baseURI_;\\n        paramsSigner = paramsSigner_;\\n    }\\n\\n    /**\\n     *  @dev TimeTrove\\n     */\\n\\n    struct CreateTimeTroveParams {\\n        bytes32 arOwnerAddress;\\n        address topicOwner;\\n        bytes signature;\\n    }\\n\\n    function createTimeTroves(CreateTimeTroveParams[] memory params) external {\\n        for (uint256 i=0; i<params.length; ++i) {\\n            bytes32 arOwnerAddress = params[i].arOwnerAddress;\\n            address topicOwner = params[i].topicOwner;\\n            bytes memory signature = params[i].signature;\\n            require(_timeTroves[topicOwner].arOwnerAddress == 0, 'TIME_TROVE_EXISTS');\\n            SignatureVerification.requireValidSignature(\\n                abi.encodePacked(this, topicOwner, arOwnerAddress),\\n                signature,\\n                paramsSigner\\n            );\\n            _timeTroves[topicOwner] = TimeTrove(arOwnerAddress, 0);\\n            emit TimeTroveCreated(topicOwner);\\n        }\\n    }\\n\\n    function timeTroveOf(address topicOwner) external view returns (TimeTrove memory) {\\n        return _timeTroves[topicOwner];\\n    }\\n\\n    /**\\n     *  @dev TimeToken\\n     */\\n\\n    function mintTimeToken(\\n        uint256 expired,\\n        uint256 valueInWei,\\n        bytes32 profileArId,\\n        bytes32 topicsArId,\\n        bytes32 topicId,\\n        address topicOwner,\\n        bytes memory signature\\n    ) external payable returns (uint256 tokenId) {\\n        require(block.number <= expired, \\\"EXPIRED\\\");\\n        require(valueInWei == msg.value, \\\"INCORRECT_ETHER_VALUE\\\");\\n        require(_timeTroves[topicOwner].arOwnerAddress != 0, 'TIME_TROVE_NOT_EXIST');\\n        SignatureVerification.requireValidSignature(\\n            abi.encodePacked(this, msg.sender, expired, valueInWei, profileArId, topicsArId, topicId, topicOwner),\\n            signature,\\n            paramsSigner\\n        );\\n        mintIndex += 1;\\n        tokenId = mintIndex;\\n        _timeTokens[tokenId] = TimeToken(valueInWei, topicOwner, TimeTokenStatus.PENDING);\\n        IMuseTime(museTimeNFT).mint(msg.sender, tokenId);\\n        emit TimeTokenMinted(topicOwner, topicId, tokenId, msg.sender, profileArId, topicsArId);\\n    }\\n\\n    function timeTokenOf(uint256 tokenId) external view returns (TimeToken memory) {\\n        return _timeTokens[tokenId];\\n    }\\n\\n    function setConfirmed(uint256[] memory tokenIds, bool withdrawOnSuccess) external {\\n        uint256 balance = _timeTroves[msg.sender].balance;\\n        for (uint256 i=0; i<tokenIds.length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            // IMuseTime(museTimeNFT).ownerOf(tokenId); // get owner first to ensure token exists, but it's not necessary since timeToken.topicOwner exists\\n            TimeToken memory timeToken = _timeTokens[tokenId];\\n            require(msg.sender == timeToken.topicOwner, \\\"NOT_TOPIC_OWNER\\\");\\n            require(timeToken.status == TimeTokenStatus.PENDING, \\\"WRONG_STATUS\\\");\\n            // update contract state\\n            _timeTokens[tokenId].status = TimeTokenStatus.CONFIRMED;\\n            balance += timeToken.valueInWei;\\n        }\\n        _timeTroves[msg.sender].balance = balance;\\n        if (withdrawOnSuccess) {\\n            withdrawFromTimeTrove();\\n        }\\n    }\\n\\n    function setRejected(uint256[] memory tokenIds) external {\\n        for (uint256 i=0; i<tokenIds.length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            address tokenOwner = IMuseTime(museTimeNFT).ownerOf(tokenId);\\n            TimeToken memory timeToken = _timeTokens[tokenId];\\n            require(msg.sender == timeToken.topicOwner, \\\"NOT_TOPIC_OWNER\\\");\\n            require(timeToken.status == TimeTokenStatus.PENDING, \\\"WRONG_STATUS\\\");\\n            // update contract state\\n            _timeTokens[tokenId].status = TimeTokenStatus.REJECTED;\\n            payable(tokenOwner).transfer(timeToken.valueInWei); // do refund\\n        }\\n    }\\n\\n    function withdrawFromTimeTrove() public {\\n        uint256 balance = _timeTroves[msg.sender].balance;\\n        require(balance > 0, \\\"NO_BALANCE\\\");\\n        uint256 fee = 0;\\n        if (feeDivisor >= 1) {\\n            fee = balance / feeDivisor;\\n        }\\n        _timeTroves[msg.sender].balance = 0;\\n        payable(msg.sender).transfer(balance - fee);\\n    }\\n\\n    /**\\n     *  @dev Render\\n     */\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\\n        if (bytes(baseURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, LibString.toString(tokenId)));\\n        } else {\\n            return \\\"\\\";\\n        }\\n    }\\n\\n    /**\\n     * @dev Controller owner actions\\n     */\\n\\n    receive() external payable {}\\n\\n    function withdrawETH(uint256 amount) external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        require(amount <= balance, 'NO_ENOUGH_BALANCE');\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    function withdrawERC20(IERC20 token, uint256 amount) external onlyOwner {\\n        uint256 balance = token.balanceOf(address(this));\\n        require(amount <= balance, 'NO_ENOUGH_BALANCE');\\n        token.transfer(msg.sender, amount);\\n    }\\n\\n    function setFeeDivisor(uint256 feeDivisor_) external onlyOwner {\\n        require(feeDivisor_ >= 1 || feeDivisor_ == 0);\\n        feeDivisor = feeDivisor_;\\n    }\\n\\n    function setParamsSigner(address paramsSigner_) external onlyOwner {\\n        paramsSigner = paramsSigner_;\\n    }\\n\\n    function setBaseURI(string memory baseURI_) external onlyOwner {\\n        baseURI = baseURI_;\\n    }\\n\\n}\\n\\ninterface IMuseTime {\\n    function mint(address to, uint256 tokenId) external;\\n    function ownerOf(uint256 id) external view returns (address owner);\\n}\\n\",\"keccak256\":\"0x32065f6305c4126fe2c5a334c082ecae8f43a251bd19237a4511e7af3a0a57cb\",\"license\":\"MIT\"},\"hardhat/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0xeb40dc124e9c4db4a12bfdb424475109757996428a0834693a8d7db8a147fef3\",\"license\":\"MIT\"},\"hardhat/contracts/libraries/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// import \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0xcd744b1b9cc674f54312eac31f4fca3a22a66c2d6c68df1ddcc8a91c99a55cdb\",\"license\":\"MIT\"},\"hardhat/contracts/libraries/SignatureVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\nlibrary SignatureVerification {\\n    using ECDSA for bytes32;\\n\\n    function requireValidSignature(\\n        bytes memory data,\\n        bytes memory signature,\\n        address signerAddress\\n    ) internal pure {\\n        require(signerAddress != address(0), \\\"SIGNER_NOT_INITIALIZED\\\");\\n        require(\\n            keccak256(data).toEthSignedMessageHash().recover(signature) == signerAddress,\\n            \\\"INVALID_SIGNATURE\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0ca966c241445172a371ee4f200a9b8f2cdc47e874639075748e0f2748c03c87\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x6c2b54ec184943843041ab77f61988b5060f6f03acbfe92cdc125f95f00891da\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0a3b4afc301241e2629ad192fa02e0f8626e3cf38ab6f45342bfd7afbde16ee0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"lib/solmate/src/utils/LibString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Efficient library for creating string representations of integers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\\n/// @author Modified from Solady (https://github.com/Vectorized/solady/blob/main/src/utils/LibString.sol)\\nlibrary LibString {\\n    function toString(uint256 value) internal pure returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but we allocate 160 bytes\\n            // to keep the free memory pointer word aligned. We'll need 1 word for the length, 1 word for the\\n            // trailing zeros padding, and 3 other words for a max of 78 digits. In total: 5 * 32 = 160 bytes.\\n            let newFreeMemoryPointer := add(mload(0x40), 160)\\n\\n            // Update the free memory pointer to avoid overriding our string.\\n            mstore(0x40, newFreeMemoryPointer)\\n\\n            // Assign str to the end of the zone of newly allocated memory.\\n            str := sub(newFreeMemoryPointer, 32)\\n\\n            // Clean the last word of memory it may not be overwritten.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                // Move the pointer 1 byte to the left.\\n                str := sub(str, 1)\\n\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n\\n                // Keep dividing temp until zero.\\n                temp := div(temp, 10)\\n\\n                 // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            // Compute and cache the final total length of the string.\\n            let length := sub(end, str)\\n\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 32)\\n\\n            // Store the string's length at the start of memory allocated for our string.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5563ad3252e35cfc90a43ccf6acdd7e74ff9dde5409c0a0b2186438691dbc1ea\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612121806100206000396000f3fe6080604052600436106101395760003560e01c80637bb7c0d8116100ab578063b5dc297e1161006f578063b5dc297e146103af578063c87b56dd146103dc578063e7a5b80b146103fc578063f14210a61461040f578063f2fde38b1461042f578063f74f9bfd1461044f57600080fd5b80637bb7c0d8146102b05780638da5cb5b146102d05780639a36f932146102ee578063a1db978214610312578063afe290a11461033257600080fd5b80632d0daa95116100fd5780632d0daa9514610204578063424a4fa11461022457806355f804b3146102395780636c0360eb14610259578063715018a61461027b57806372ef32051461029057600080fd5b80630157437c14610145578063043531b11461016757806308678bb6146101875780630cbee0d3146101c4578063145e5f62146101e457600080fd5b3661014057005b600080fd5b34801561015157600080fd5b50610165610160366004611992565b610465565b005b34801561017357600080fd5b506101656101823660046119cf565b610694565b34801561019357600080fd5b506066546101a7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101d057600080fd5b506065546101a7906001600160a01b031681565b3480156101f057600080fd5b506101656101ff366004611a6d565b6106b8565b34801561021057600080fd5b5061016561021f366004611b7d565b610855565b34801561023057600080fd5b50610165610a15565b34801561024557600080fd5b50610165610254366004611bcf565b610ac6565b34801561026557600080fd5b5061026e610ada565b6040516101bb9190611c28565b34801561028757600080fd5b50610165610b68565b34801561029c57600080fd5b506101656102ab366004611c5b565b610b7c565b3480156102bc57600080fd5b506101656102cb366004611c7f565b610ba6565b3480156102dc57600080fd5b506033546001600160a01b03166101a7565b3480156102fa57600080fd5b50610304606d5481565b6040519081526020016101bb565b34801561031e57600080fd5b5061016561032d366004611ce3565b610cfd565b34801561033e57600080fd5b5061039461034d366004611c5b565b6040805180820190915260008082526020820152506001600160a01b03166000908152606b6020908152604091829020825180840190935280548352600101549082015290565b604080518251815260209283015192810192909252016101bb565b3480156103bb57600080fd5b506103cf6103ca3660046119cf565b610e27565b6040516101bb9190611d25565b3480156103e857600080fd5b5061026e6103f73660046119cf565b610eb8565b61030461040a366004611d71565b610f17565b34801561041b57600080fd5b5061016561042a3660046119cf565b6111e0565b34801561043b57600080fd5b5061016561044a366004611c5b565b61125a565b34801561045b57600080fd5b5061030460685481565b60005b815181101561069057600082828151811061048557610485611df1565b60209081029190910101516065546040516331a9108f60e11b8152600481018390529192506000916001600160a01b0390911690636352211e90602401602060405180830381865afa1580156104df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105039190611e07565b6000838152606c6020908152604080832081516060810183528154815260018201546001600160a01b038116948201949094529495509293929190830190600160a01b900460ff16600281111561055c5761055c611d0f565b600281111561056d5761056d611d0f565b81525050905080602001516001600160a01b0316336001600160a01b0316146105cf5760405162461bcd60e51b815260206004820152600f60248201526e2727aa2faa27a824a1afa7aba722a960891b60448201526064015b60405180910390fd5b6000816040015160028111156105e7576105e7611d0f565b146106235760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f53544154555360a01b60448201526064016105c6565b6000838152606c6020526040808220600101805460ff60a01b1916600160a01b179055825190516001600160a01b0385169282156108fc02929190818181858888f1935050505015801561067b573d6000803e3d6000fd5b505050508061068990611e3a565b9050610468565b5050565b61069c6112d3565b6001811015806106aa575080155b6106b357600080fd5b606d55565b60005b81518110156106905760008282815181106106d8576106d8611df1565b602002602001015160000151905060008383815181106106fa576106fa611df1565b6020026020010151602001519050600084848151811061071c5761071c611df1565b6020908102919091018101516040908101516001600160a01b0385166000908152606b909352912054909150156107895760405162461bcd60e51b815260206004820152601160248201527054494d455f54524f56455f45584953545360781b60448201526064016105c6565b6040516bffffffffffffffffffffffff1930606090811b8216602084015284901b166034820152604881018490526107e19060680160408051601f1981840301815291905260665483906001600160a01b031661132d565b604080518082018252848152600060208083018281526001600160a01b038716808452606b9092528483209351845551600190930192909255915190917fd222986f567dbe87838ed775b073be72a475581a20f754c9b4cdf304953b104c91a25050508061084e90611e3a565b90506106bb565b336000908152606b6020526040812060010154905b83518110156109ec57600084828151811061088757610887611df1565b6020908102919091018101516000818152606c8352604080822081516060810183528154815260018201546001600160a01b03811696820196909652939550919390830190600160a01b900460ff1660028111156108e7576108e7611d0f565b60028111156108f8576108f8611d0f565b81525050905080602001516001600160a01b0316336001600160a01b0316146109555760405162461bcd60e51b815260206004820152600f60248201526e2727aa2faa27a824a1afa7aba722a960891b60448201526064016105c6565b60008160400151600281111561096d5761096d611d0f565b146109a95760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f53544154555360a01b60448201526064016105c6565b6000828152606c60205260409020600101805460ff60a01b1916600160a11b17905580516109d79085611e53565b93505050806109e590611e3a565b905061086a565b50336000908152606b602052604090206001018190558115610a1057610a10610a15565b505050565b336000908152606b602052604090206001015480610a625760405162461bcd60e51b815260206004820152600a6024820152694e4f5f42414c414e434560b01b60448201526064016105c6565b60006001606d5410610a7e57606d54610a7b9083611e66565b90505b336000818152606b60205260408120600101556108fc610a9e8385611e88565b6040518115909202916000818181858888f19350505050158015610a10573d6000803e3d6000fd5b610ace6112d3565b60676106908282611f23565b60678054610ae790611e9b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1390611e9b565b8015610b605780601f10610b3557610100808354040283529160200191610b60565b820191906000526020600020905b815481529060010190602001808311610b4357829003601f168201915b505050505081565b610b706112d3565b610b7a6000611438565b565b610b846112d3565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff1615808015610bc65750600054600160ff909116105b80610be05750303b158015610be0575060005460ff166001145b610c435760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105c6565b6000805460ff191660011790558015610c66576000805461ff0019166101001790555b610c6e61148a565b606580546001600160a01b0319166001600160a01b0386161790556067610c958482611f23565b50606680546001600160a01b0319166001600160a01b0384161790558015610cf7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b610d056112d3565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d709190611fe3565b905080821115610db65760405162461bcd60e51b81526020600482015260116024820152704e4f5f454e4f5547485f42414c414e434560781b60448201526064016105c6565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b0384169063a9059cbb906044016020604051808303816000875af1158015610e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf79190611ffc565b610e4860408051606081018252600080825260208201819052909182015290565b6000828152606c602090815260409182902082516060810184528154815260018201546001600160a01b0381169382019390935292909190830190600160a01b900460ff166002811115610e9e57610e9e611d0f565b6002811115610eaf57610eaf611d0f565b90525092915050565b6060600060678054610ec990611e9b565b90501115610f03576067610edc836114b9565b604051602001610eed929190612019565b6040516020818303038152906040529050919050565b505060408051602081019091526000815290565b600087431115610f535760405162461bcd60e51b81526020600482015260076024820152661156141254915160ca1b60448201526064016105c6565b348714610f9a5760405162461bcd60e51b8152602060048201526015602482015274494e434f52524543545f45544845525f56414c554560581b60448201526064016105c6565b6001600160a01b0383166000908152606b60205260408120549003610ff85760405162461bcd60e51b81526020600482015260146024820152731512535157d51493d59157d393d517d1561254d560621b60448201526064016105c6565b6040516bffffffffffffffffffffffff1930606090811b8216602084015233811b82166034840152604883018b9052606883018a90526088830189905260a8830188905260c8830187905285901b1660e88201526110769060fc0160408051601f1981840301815291905260665484906001600160a01b031661132d565b6001606860008282546110899190611e53565b9091555050606854604080516060810182528981526001600160a01b03861660208201529192508101600090526000828152606c602090815260409182902083518155908301516001820180546001600160a01b039092166001600160a01b031983168117825593850151929390916001600160a81b03191617600160a01b83600281111561111a5761111a611d0f565b0217905550506065546040516340c10f1960e01b8152336004820152602481018490526001600160a01b0390911691506340c10f1990604401600060405180830381600087803b15801561116d57600080fd5b505af1158015611181573d6000803e3d6000fd5b505060408051338152602081018a90529081018890528392508691506001600160a01b038616907f687824a6c125dcb60002ff015ab82ee9264c8fd9b86416bf189f421beb656c4e9060600160405180910390a4979650505050505050565b6111e86112d3565b478082111561122d5760405162461bcd60e51b81526020600482015260116024820152704e4f5f454e4f5547485f42414c414e434560781b60448201526064016105c6565b604051339083156108fc029084906000818181858888f19350505050158015610a10573d6000803e3d6000fd5b6112626112d3565b6001600160a01b0381166112c75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105c6565b6112d081611438565b50565b6033546001600160a01b03163314610b7a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105c6565b6001600160a01b03811661137c5760405162461bcd60e51b815260206004820152601660248201527514d251d3915497d393d517d25392551250531256915160521b60448201526064016105c6565b806001600160a01b03166113ee836113e886805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b906114fd565b6001600160a01b031614610a105760405162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b60448201526064016105c6565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166114b15760405162461bcd60e51b81526004016105c6906120a0565b610b7a611523565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a9004806114d35750819003601f19909101908152919050565b600080600061150c8585611553565b91509150611519816115c1565b5090505b92915050565b600054610100900460ff1661154a5760405162461bcd60e51b81526004016105c6906120a0565b610b7a33611438565b60008082516041036115895760208301516040840151606085015160001a61157d87828585611777565b945094505050506115ba565b82516040036115b257602083015160408401516115a7868383611864565b9350935050506115ba565b506000905060025b9250929050565b60008160048111156115d5576115d5611d0f565b036115dd5750565b60018160048111156115f1576115f1611d0f565b0361163e5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105c6565b600281600481111561165257611652611d0f565b0361169f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105c6565b60038160048111156116b3576116b3611d0f565b0361170b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105c6565b600481600481111561171f5761171f611d0f565b036112d05760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016105c6565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156117ae575060009050600361185b565b8460ff16601b141580156117c657508460ff16601c14155b156117d7575060009050600461185b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561182b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166118545760006001925092505061185b565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161188587828885611777565b935093505050935093915050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156118cc576118cc611893565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156118fb576118fb611893565b604052919050565b600067ffffffffffffffff82111561191d5761191d611893565b5060051b60200190565b600082601f83011261193857600080fd5b8135602061194d61194883611903565b6118d2565b82815260059290921b8401810191818101908684111561196c57600080fd5b8286015b848110156119875780358352918301918301611970565b509695505050505050565b6000602082840312156119a457600080fd5b813567ffffffffffffffff8111156119bb57600080fd5b6119c784828501611927565b949350505050565b6000602082840312156119e157600080fd5b5035919050565b6001600160a01b03811681146112d057600080fd5b600082601f830112611a0e57600080fd5b813567ffffffffffffffff811115611a2857611a28611893565b611a3b601f8201601f19166020016118d2565b818152846020838601011115611a5057600080fd5b816020850160208301376000918101602001919091529392505050565b60006020808385031215611a8057600080fd5b823567ffffffffffffffff80821115611a9857600080fd5b818501915085601f830112611aac57600080fd5b8135611aba61194882611903565b81815260059190911b83018401908481019088831115611ad957600080fd5b8585015b83811015611b6257803585811115611af55760008081fd5b86016060818c03601f1901811315611b0d5760008081fd5b611b156118a9565b898301358152604080840135611b2a816119e8565b828c0152918301359188831115611b415760008081fd5b611b4f8e8c858701016119fd565b9082015285525050918601918601611add565b5098975050505050505050565b80151581146112d057600080fd5b60008060408385031215611b9057600080fd5b823567ffffffffffffffff811115611ba757600080fd5b611bb385828601611927565b9250506020830135611bc481611b6f565b809150509250929050565b600060208284031215611be157600080fd5b813567ffffffffffffffff811115611bf857600080fd5b6119c7848285016119fd565b60005b83811015611c1f578181015183820152602001611c07565b50506000910152565b6020815260008251806020840152611c47816040850160208701611c04565b601f01601f19169190910160400192915050565b600060208284031215611c6d57600080fd5b8135611c78816119e8565b9392505050565b600080600060608486031215611c9457600080fd5b8335611c9f816119e8565b9250602084013567ffffffffffffffff811115611cbb57600080fd5b611cc7868287016119fd565b9250506040840135611cd8816119e8565b809150509250925092565b60008060408385031215611cf657600080fd5b8235611d01816119e8565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b815181526020808301516001600160a01b0316908201526040820151606082019060038110611d6457634e487b7160e01b600052602160045260246000fd5b8060408401525092915050565b600080600080600080600060e0888a031215611d8c57600080fd5b873596506020880135955060408801359450606088013593506080880135925060a0880135611dba816119e8565b915060c088013567ffffffffffffffff811115611dd657600080fd5b611de28a828b016119fd565b91505092959891949750929550565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611e1957600080fd5b8151611c78816119e8565b634e487b7160e01b600052601160045260246000fd5b600060018201611e4c57611e4c611e24565b5060010190565b8082018082111561151d5761151d611e24565b600082611e8357634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561151d5761151d611e24565b600181811c90821680611eaf57607f821691505b602082108103611ecf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610a1057600081815260208120601f850160051c81016020861015611efc5750805b601f850160051c820191505b81811015611f1b57828155600101611f08565b505050505050565b815167ffffffffffffffff811115611f3d57611f3d611893565b611f5181611f4b8454611e9b565b84611ed5565b602080601f831160018114611f865760008415611f6e5750858301515b600019600386901b1c1916600185901b178555611f1b565b600085815260208120601f198616915b82811015611fb557888601518255948401946001909101908401611f96565b5085821015611fd35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215611ff557600080fd5b5051919050565b60006020828403121561200e57600080fd5b8151611c7881611b6f565b600080845461202781611e9b565b6001828116801561203f576001811461205457612083565b60ff1984168752821515830287019450612083565b8860005260208060002060005b8581101561207a5781548a820152908401908201612061565b50505082870194505b505050508351612097818360208801611c04565b01949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220c36d0d5ed8122e3c01809425a555ba7100c66edb656ea3d0bddabe1179d2185764736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101395760003560e01c80637bb7c0d8116100ab578063b5dc297e1161006f578063b5dc297e146103af578063c87b56dd146103dc578063e7a5b80b146103fc578063f14210a61461040f578063f2fde38b1461042f578063f74f9bfd1461044f57600080fd5b80637bb7c0d8146102b05780638da5cb5b146102d05780639a36f932146102ee578063a1db978214610312578063afe290a11461033257600080fd5b80632d0daa95116100fd5780632d0daa9514610204578063424a4fa11461022457806355f804b3146102395780636c0360eb14610259578063715018a61461027b57806372ef32051461029057600080fd5b80630157437c14610145578063043531b11461016757806308678bb6146101875780630cbee0d3146101c4578063145e5f62146101e457600080fd5b3661014057005b600080fd5b34801561015157600080fd5b50610165610160366004611992565b610465565b005b34801561017357600080fd5b506101656101823660046119cf565b610694565b34801561019357600080fd5b506066546101a7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101d057600080fd5b506065546101a7906001600160a01b031681565b3480156101f057600080fd5b506101656101ff366004611a6d565b6106b8565b34801561021057600080fd5b5061016561021f366004611b7d565b610855565b34801561023057600080fd5b50610165610a15565b34801561024557600080fd5b50610165610254366004611bcf565b610ac6565b34801561026557600080fd5b5061026e610ada565b6040516101bb9190611c28565b34801561028757600080fd5b50610165610b68565b34801561029c57600080fd5b506101656102ab366004611c5b565b610b7c565b3480156102bc57600080fd5b506101656102cb366004611c7f565b610ba6565b3480156102dc57600080fd5b506033546001600160a01b03166101a7565b3480156102fa57600080fd5b50610304606d5481565b6040519081526020016101bb565b34801561031e57600080fd5b5061016561032d366004611ce3565b610cfd565b34801561033e57600080fd5b5061039461034d366004611c5b565b6040805180820190915260008082526020820152506001600160a01b03166000908152606b6020908152604091829020825180840190935280548352600101549082015290565b604080518251815260209283015192810192909252016101bb565b3480156103bb57600080fd5b506103cf6103ca3660046119cf565b610e27565b6040516101bb9190611d25565b3480156103e857600080fd5b5061026e6103f73660046119cf565b610eb8565b61030461040a366004611d71565b610f17565b34801561041b57600080fd5b5061016561042a3660046119cf565b6111e0565b34801561043b57600080fd5b5061016561044a366004611c5b565b61125a565b34801561045b57600080fd5b5061030460685481565b60005b815181101561069057600082828151811061048557610485611df1565b60209081029190910101516065546040516331a9108f60e11b8152600481018390529192506000916001600160a01b0390911690636352211e90602401602060405180830381865afa1580156104df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105039190611e07565b6000838152606c6020908152604080832081516060810183528154815260018201546001600160a01b038116948201949094529495509293929190830190600160a01b900460ff16600281111561055c5761055c611d0f565b600281111561056d5761056d611d0f565b81525050905080602001516001600160a01b0316336001600160a01b0316146105cf5760405162461bcd60e51b815260206004820152600f60248201526e2727aa2faa27a824a1afa7aba722a960891b60448201526064015b60405180910390fd5b6000816040015160028111156105e7576105e7611d0f565b146106235760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f53544154555360a01b60448201526064016105c6565b6000838152606c6020526040808220600101805460ff60a01b1916600160a01b179055825190516001600160a01b0385169282156108fc02929190818181858888f1935050505015801561067b573d6000803e3d6000fd5b505050508061068990611e3a565b9050610468565b5050565b61069c6112d3565b6001811015806106aa575080155b6106b357600080fd5b606d55565b60005b81518110156106905760008282815181106106d8576106d8611df1565b602002602001015160000151905060008383815181106106fa576106fa611df1565b6020026020010151602001519050600084848151811061071c5761071c611df1565b6020908102919091018101516040908101516001600160a01b0385166000908152606b909352912054909150156107895760405162461bcd60e51b815260206004820152601160248201527054494d455f54524f56455f45584953545360781b60448201526064016105c6565b6040516bffffffffffffffffffffffff1930606090811b8216602084015284901b166034820152604881018490526107e19060680160408051601f1981840301815291905260665483906001600160a01b031661132d565b604080518082018252848152600060208083018281526001600160a01b038716808452606b9092528483209351845551600190930192909255915190917fd222986f567dbe87838ed775b073be72a475581a20f754c9b4cdf304953b104c91a25050508061084e90611e3a565b90506106bb565b336000908152606b6020526040812060010154905b83518110156109ec57600084828151811061088757610887611df1565b6020908102919091018101516000818152606c8352604080822081516060810183528154815260018201546001600160a01b03811696820196909652939550919390830190600160a01b900460ff1660028111156108e7576108e7611d0f565b60028111156108f8576108f8611d0f565b81525050905080602001516001600160a01b0316336001600160a01b0316146109555760405162461bcd60e51b815260206004820152600f60248201526e2727aa2faa27a824a1afa7aba722a960891b60448201526064016105c6565b60008160400151600281111561096d5761096d611d0f565b146109a95760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f53544154555360a01b60448201526064016105c6565b6000828152606c60205260409020600101805460ff60a01b1916600160a11b17905580516109d79085611e53565b93505050806109e590611e3a565b905061086a565b50336000908152606b602052604090206001018190558115610a1057610a10610a15565b505050565b336000908152606b602052604090206001015480610a625760405162461bcd60e51b815260206004820152600a6024820152694e4f5f42414c414e434560b01b60448201526064016105c6565b60006001606d5410610a7e57606d54610a7b9083611e66565b90505b336000818152606b60205260408120600101556108fc610a9e8385611e88565b6040518115909202916000818181858888f19350505050158015610a10573d6000803e3d6000fd5b610ace6112d3565b60676106908282611f23565b60678054610ae790611e9b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1390611e9b565b8015610b605780601f10610b3557610100808354040283529160200191610b60565b820191906000526020600020905b815481529060010190602001808311610b4357829003601f168201915b505050505081565b610b706112d3565b610b7a6000611438565b565b610b846112d3565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff1615808015610bc65750600054600160ff909116105b80610be05750303b158015610be0575060005460ff166001145b610c435760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105c6565b6000805460ff191660011790558015610c66576000805461ff0019166101001790555b610c6e61148a565b606580546001600160a01b0319166001600160a01b0386161790556067610c958482611f23565b50606680546001600160a01b0319166001600160a01b0384161790558015610cf7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b610d056112d3565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d709190611fe3565b905080821115610db65760405162461bcd60e51b81526020600482015260116024820152704e4f5f454e4f5547485f42414c414e434560781b60448201526064016105c6565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b0384169063a9059cbb906044016020604051808303816000875af1158015610e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf79190611ffc565b610e4860408051606081018252600080825260208201819052909182015290565b6000828152606c602090815260409182902082516060810184528154815260018201546001600160a01b0381169382019390935292909190830190600160a01b900460ff166002811115610e9e57610e9e611d0f565b6002811115610eaf57610eaf611d0f565b90525092915050565b6060600060678054610ec990611e9b565b90501115610f03576067610edc836114b9565b604051602001610eed929190612019565b6040516020818303038152906040529050919050565b505060408051602081019091526000815290565b600087431115610f535760405162461bcd60e51b81526020600482015260076024820152661156141254915160ca1b60448201526064016105c6565b348714610f9a5760405162461bcd60e51b8152602060048201526015602482015274494e434f52524543545f45544845525f56414c554560581b60448201526064016105c6565b6001600160a01b0383166000908152606b60205260408120549003610ff85760405162461bcd60e51b81526020600482015260146024820152731512535157d51493d59157d393d517d1561254d560621b60448201526064016105c6565b6040516bffffffffffffffffffffffff1930606090811b8216602084015233811b82166034840152604883018b9052606883018a90526088830189905260a8830188905260c8830187905285901b1660e88201526110769060fc0160408051601f1981840301815291905260665484906001600160a01b031661132d565b6001606860008282546110899190611e53565b9091555050606854604080516060810182528981526001600160a01b03861660208201529192508101600090526000828152606c602090815260409182902083518155908301516001820180546001600160a01b039092166001600160a01b031983168117825593850151929390916001600160a81b03191617600160a01b83600281111561111a5761111a611d0f565b0217905550506065546040516340c10f1960e01b8152336004820152602481018490526001600160a01b0390911691506340c10f1990604401600060405180830381600087803b15801561116d57600080fd5b505af1158015611181573d6000803e3d6000fd5b505060408051338152602081018a90529081018890528392508691506001600160a01b038616907f687824a6c125dcb60002ff015ab82ee9264c8fd9b86416bf189f421beb656c4e9060600160405180910390a4979650505050505050565b6111e86112d3565b478082111561122d5760405162461bcd60e51b81526020600482015260116024820152704e4f5f454e4f5547485f42414c414e434560781b60448201526064016105c6565b604051339083156108fc029084906000818181858888f19350505050158015610a10573d6000803e3d6000fd5b6112626112d3565b6001600160a01b0381166112c75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105c6565b6112d081611438565b50565b6033546001600160a01b03163314610b7a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105c6565b6001600160a01b03811661137c5760405162461bcd60e51b815260206004820152601660248201527514d251d3915497d393d517d25392551250531256915160521b60448201526064016105c6565b806001600160a01b03166113ee836113e886805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b906114fd565b6001600160a01b031614610a105760405162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b60448201526064016105c6565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166114b15760405162461bcd60e51b81526004016105c6906120a0565b610b7a611523565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a9004806114d35750819003601f19909101908152919050565b600080600061150c8585611553565b91509150611519816115c1565b5090505b92915050565b600054610100900460ff1661154a5760405162461bcd60e51b81526004016105c6906120a0565b610b7a33611438565b60008082516041036115895760208301516040840151606085015160001a61157d87828585611777565b945094505050506115ba565b82516040036115b257602083015160408401516115a7868383611864565b9350935050506115ba565b506000905060025b9250929050565b60008160048111156115d5576115d5611d0f565b036115dd5750565b60018160048111156115f1576115f1611d0f565b0361163e5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105c6565b600281600481111561165257611652611d0f565b0361169f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105c6565b60038160048111156116b3576116b3611d0f565b0361170b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105c6565b600481600481111561171f5761171f611d0f565b036112d05760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016105c6565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156117ae575060009050600361185b565b8460ff16601b141580156117c657508460ff16601c14155b156117d7575060009050600461185b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561182b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166118545760006001925092505061185b565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161188587828885611777565b935093505050935093915050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156118cc576118cc611893565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156118fb576118fb611893565b604052919050565b600067ffffffffffffffff82111561191d5761191d611893565b5060051b60200190565b600082601f83011261193857600080fd5b8135602061194d61194883611903565b6118d2565b82815260059290921b8401810191818101908684111561196c57600080fd5b8286015b848110156119875780358352918301918301611970565b509695505050505050565b6000602082840312156119a457600080fd5b813567ffffffffffffffff8111156119bb57600080fd5b6119c784828501611927565b949350505050565b6000602082840312156119e157600080fd5b5035919050565b6001600160a01b03811681146112d057600080fd5b600082601f830112611a0e57600080fd5b813567ffffffffffffffff811115611a2857611a28611893565b611a3b601f8201601f19166020016118d2565b818152846020838601011115611a5057600080fd5b816020850160208301376000918101602001919091529392505050565b60006020808385031215611a8057600080fd5b823567ffffffffffffffff80821115611a9857600080fd5b818501915085601f830112611aac57600080fd5b8135611aba61194882611903565b81815260059190911b83018401908481019088831115611ad957600080fd5b8585015b83811015611b6257803585811115611af55760008081fd5b86016060818c03601f1901811315611b0d5760008081fd5b611b156118a9565b898301358152604080840135611b2a816119e8565b828c0152918301359188831115611b415760008081fd5b611b4f8e8c858701016119fd565b9082015285525050918601918601611add565b5098975050505050505050565b80151581146112d057600080fd5b60008060408385031215611b9057600080fd5b823567ffffffffffffffff811115611ba757600080fd5b611bb385828601611927565b9250506020830135611bc481611b6f565b809150509250929050565b600060208284031215611be157600080fd5b813567ffffffffffffffff811115611bf857600080fd5b6119c7848285016119fd565b60005b83811015611c1f578181015183820152602001611c07565b50506000910152565b6020815260008251806020840152611c47816040850160208701611c04565b601f01601f19169190910160400192915050565b600060208284031215611c6d57600080fd5b8135611c78816119e8565b9392505050565b600080600060608486031215611c9457600080fd5b8335611c9f816119e8565b9250602084013567ffffffffffffffff811115611cbb57600080fd5b611cc7868287016119fd565b9250506040840135611cd8816119e8565b809150509250925092565b60008060408385031215611cf657600080fd5b8235611d01816119e8565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b815181526020808301516001600160a01b0316908201526040820151606082019060038110611d6457634e487b7160e01b600052602160045260246000fd5b8060408401525092915050565b600080600080600080600060e0888a031215611d8c57600080fd5b873596506020880135955060408801359450606088013593506080880135925060a0880135611dba816119e8565b915060c088013567ffffffffffffffff811115611dd657600080fd5b611de28a828b016119fd565b91505092959891949750929550565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611e1957600080fd5b8151611c78816119e8565b634e487b7160e01b600052601160045260246000fd5b600060018201611e4c57611e4c611e24565b5060010190565b8082018082111561151d5761151d611e24565b600082611e8357634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561151d5761151d611e24565b600181811c90821680611eaf57607f821691505b602082108103611ecf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610a1057600081815260208120601f850160051c81016020861015611efc5750805b601f850160051c820191505b81811015611f1b57828155600101611f08565b505050505050565b815167ffffffffffffffff811115611f3d57611f3d611893565b611f5181611f4b8454611e9b565b84611ed5565b602080601f831160018114611f865760008415611f6e5750858301515b600019600386901b1c1916600185901b178555611f1b565b600085815260208120601f198616915b82811015611fb557888601518255948401946001909101908401611f96565b5085821015611fd35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215611ff557600080fd5b5051919050565b60006020828403121561200e57600080fd5b8151611c7881611b6f565b600080845461202781611e9b565b6001828116801561203f576001811461205457612083565b60ff1984168752821515830287019450612083565b8860005260208060002060005b8581101561207a5781548a820152908401908201612061565b50505082870194505b505050508351612097818360208801611c04565b01949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220c36d0d5ed8122e3c01809425a555ba7100c66edb656ea3d0bddabe1179d2185764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "mintTimeToken(uint256,uint256,bytes32,bytes32,bytes32,address,bytes)": {
        "details": "TimeToken"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "tokenURI(uint256)": {
        "details": "Render"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_claimedMintKeysLegacy": {
        "details": "Key(uint256) mapping to a claimed key. Used to prevent address from rebroadcasting mint transactions"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1489,
        "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1492,
        "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1976,
        "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1361,
        "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 1481,
        "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 176,
        "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
        "label": "museTimeNFT",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 178,
        "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
        "label": "paramsSigner",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 180,
        "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
        "label": "baseURI",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 182,
        "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
        "label": "mintIndex",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 187,
        "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
        "label": "_claimedMintKeysLegacy",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 192,
        "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
        "label": "_timeTrovesLegacy",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_struct(TimeTrove)162_storage)"
      },
      {
        "astId": 197,
        "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
        "label": "_timeTroves",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_struct(TimeTrove)162_storage)"
      },
      {
        "astId": 202,
        "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
        "label": "_timeTokens",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_uint256,t_struct(TimeToken)174_storage)"
      },
      {
        "astId": 204,
        "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
        "label": "feeDivisor",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(TimeTokenStatus)166": {
        "encoding": "inplace",
        "label": "enum MuseTimeController.TimeTokenStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(TimeTrove)162_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MuseTimeController.TimeTrove)",
        "numberOfBytes": "32",
        "value": "t_struct(TimeTrove)162_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(TimeToken)174_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MuseTimeController.TimeToken)",
        "numberOfBytes": "32",
        "value": "t_struct(TimeToken)174_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TimeToken)174_storage": {
        "encoding": "inplace",
        "label": "struct MuseTimeController.TimeToken",
        "members": [
          {
            "astId": 168,
            "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
            "label": "valueInWei",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 170,
            "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
            "label": "topicOwner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 173,
            "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
            "label": "status",
            "offset": 20,
            "slot": "1",
            "type": "t_enum(TimeTokenStatus)166"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TimeTrove)162_storage": {
        "encoding": "inplace",
        "label": "struct MuseTimeController.TimeTrove",
        "members": [
          {
            "astId": 159,
            "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
            "label": "arOwnerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 161,
            "contract": "hardhat/contracts/MuseTimeController.sol:MuseTimeController",
            "label": "balance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}